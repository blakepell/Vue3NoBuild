@model Vue3NoBuild.Models.BaseViewModel
@{
    ViewData["Title"] = "Cache Manager";
}

<div id="app" class="rvt-m-top-md" v-cloak>
    <r-dialog ref="dlg" :title="dialogTitle" :description="dialogMessage">
        <div style="text-align: right">
            <button type="button" class="rvt-button rvt-button--secondary" @@click="copyText()">
                <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                    <g fill="currentColor">
                        <path d="M4,10.23H1.92V2H8V3h2V2A2,2,0,0,0,8,0H1.92a2,2,0,0,0-2,2v8.23a2,2,0,0,0,2,2H4Z" />
                        <path d="M14,16H8a2,2,0,0,1-2-2V7A2,2,0,0,1,8,5h6a2,2,0,0,1,2,2v7A2,2,0,0,1,14,16ZM8,7v7h6V7Z" />
                    </g>
                </svg>
                <span class="rvt-m-left-xs">Copy</span>
            </button>
        </div>

        <pre class="iuf-code"><code>{{dialogCode}}</code></pre>
    </r-dialog>

    <div class="rvt-tabs" data-rvt-tabs="tabset-1">
        <div class="rvt-tabs__tablist" role="tablist" aria-label="Rivet tabs">
            <button class="rvt-tabs__tab" role="tab" data-rvt-tab="tab-1" id="t-one">
                Local Storage
            </button>
            <button class="rvt-tabs__tab" role="tab" data-rvt-tab="tab-2" id="t-two">
                Server Cache
            </button>
        </div>
        <!-- Local Cache -->
        <div class="rvt-tabs__panel" tabindex="0" role="tabpanel" id="tab-1" aria-labelledby="t-one" data-rvt-tab-panel="tab-1">
            <div class="rvt-flex rvt-p-lr-xxs">
                <div class="rvt-flex rvt-items-center rvt-grow-1">
                    <span class="rvt-ts-23 rvt-text-bold">Local Storage Items:</span>
                </div>
                <div class="rvt-flex rvt-items-center rvt-grow-1 rvt-justify-end rvt-m-left-md">
                    <button class="rvt-button rvt-button--secondary" @@click="localRefresh()">
                        <rvt-icon name="sync"></rvt-icon>
                        <span class="rvt-p-left-xs">Refresh</span>
                    </button>
                </div>
            </div>

            <hr />

            <table class="rvt-table-stripes rvt-table-compact rvt-table-hover rvt-table-cells rvt-m-top-sm" v-if="localCache.length > 0">
                <caption class="rvt-sr-only">Local Storage Cached Items</caption>
                <thead>
                    <tr>
                        <th style="width: 75px;">Actions</th>
                        <th>Key</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="item in localCache" style="cursor: pointer;">
                        <td>
                            <button type="button" class="rvt-button rvt-button--secondary" @@click="deleteLocal(item)" style="margin-right: 5px;">
                                <rvt-icon name="trash" title="Delete"></rvt-icon>
                            </button>
                        </td>
                        <td @@click="showLocalCacheItem(item)">{{item}}</td>
                    </tr>
                </tbody>
            </table>

            <r-alert-card title="No Results" text="There are no items currently stored in the local cache." v-if="localCache.length === 0"></r-alert-card>

        </div>

        <!-- Server Cache -->
        <div class="rvt-tabs__panel" tabindex="0" role="tabpanel" id="tab-2" aria-labelledby="t-two" data-rvt-tab-panel="tab-2" data-rvt-tab-init>
            <div class="rvt-flex rvt-p-lr-xxs">
                <div class="rvt-flex rvt-items-center rvt-grow-1">
                    <span class="rvt-ts-23 rvt-text-bold">Server Cached Items:</span>
                </div>
                <div class="rvt-flex rvt-items-center rvt-grow-1 rvt-justify-end rvt-m-left-md">
                    <button class="rvt-button rvt-button--secondary" @@click="serverRefresh()">
                        <rvt-icon name="sync"></rvt-icon>
                        <span class="rvt-p-left-xs">Refresh</span>
                    </button>
                </div>
            </div>

            <hr />

            <table class="rvt-table-stripes rvt-table-compact rvt-table-hover rvt-table-cells rvt-m-top-sm" v-if="serverCache.length > 0">
                <caption class="rvt-sr-only">Server Storage Cached Items</caption>
                <thead>
                    <tr>
                        <th style="width: 75px;">Actions</th>
                        <th>Key</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="item in serverCache" style="cursor: pointer;">
                        <td>
                            <button type="button" class="rvt-button rvt-button--secondary" @@click="deleteServer(item)" style="margin-right: 5px;">
                                <rvt-icon name="trash" title="Delete"></rvt-icon>
                            </button>
                        </td>
                        <td @@click="showServerCacheItem(item)">{{item}}</td>
                    </tr>
                </tbody>
            </table>

            <r-alert-card title="No Results" text="There are no items currently stored in the server cache." v-if="serverCache.length === 0"></r-alert-card>
        </div>
    </div>
</div>


@section scripts
{
    <script type="module">
        const { createApp } = Vue

        import RInputText from '/js/components/rivet-input-text.js'
        import RAjaxSelect from '/js/components/rivet-ajax-select.js'
        import RAlertCard from '/js/components/rivet-alert-card.js'
        import RDialog from '/js/components/rivet-dialog.js'
        import * as iuf from '/js/iuf.js'

        createApp({
            data() {
                return {
                    dialogTitle: "Alert",
                    dialogMessage: "",
                    dialogCode: "",
                    dialogCss: "",
                    localCache: [],
                    serverCache: []
                }
            },
            async mounted() {
                this.localCache = iuf.ListObjects();
                await this.serverRefresh();
            },
            methods: {
                deleteLocal(item) {
                    iuf.RemoveObject(item);
                    this.localCache = iuf.ListObjects();
                },
                async deleteServer(item) {
                    this.serverCache = await iuf.HttpGet(`/cache/delete-server-cache-item?key=${item}`)
                },
                localRefresh() {
                    this.localCache = iuf.ListObjects();
                },
                async serverRefresh() {
                    this.serverCache = await iuf.HttpGet("/cache/server-cache-list");
                },
                isObject(objValue) {
                    return objValue && typeof objValue === 'object' && objValue.constructor === Object;
                },
                async copyText() {
                    await navigator.clipboard.writeText(this.dialogCode);
                },
                showLocalCacheItem(item) {
                    this.dialogTitle = item;
                    let str = "";

                    try {
                        this.$refs["dlg"].show();
                        let obj = iuf.GetObject(item);
                        str = JSON.stringify(obj, null, 4);
                        this.dialogCode = str;
                        this.dialogCss = "language-javascript";
                        
                        return;
                    }
                    catch (e) {
                        console.error(e);
                    }

                    this.$refs["dlg"].show();
                    str = iuf.GetString(item);
                    this.dialogCode = str;
                    this.dialogCss = "iuf-code";
                },
                async showServerCacheItem(item) {
                    let obj = await iuf.HttpGet(`/cache/server-cache-item?key=${item}`)

                    this.dialogTitle = item;

                    try {
                        this.$refs["dlg"].show();
                        this.dialogCode = obj;
                        this.dialogCss = "language-javascript";
                        return;
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
            },
            computed: {
            }
        }).component('RInputText', RInputText)
            .component('RAlertCard', RAlertCard)
            .component('RDialog', RDialog)
            .mount('#app')

    </script>
}
